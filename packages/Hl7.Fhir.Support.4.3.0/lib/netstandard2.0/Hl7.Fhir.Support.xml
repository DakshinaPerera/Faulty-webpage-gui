<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Hl7.Fhir.Support</name>
    </assembly>
    <members>
        <member name="T:Hl7.Fhir.Specification.FhirRelease">
            <summary>
            The major FHIR publication releases.
            </summary>
            <remarks>Note: this is set is ordered, so "older release" is less than "newer release".</remarks>
        </member>
        <member name="F:Hl7.Fhir.Specification.FhirRelease.DSTU1">
            <summary>
            FHIR Release DSTU1
            http://hl7.org/fhir/DSTU1
            </summary>
        </member>
        <member name="F:Hl7.Fhir.Specification.FhirRelease.DSTU2">
            <summary>
            FHIR Release DSTU2 
            http://hl7.org/fhir/DSTU2
            </summary>
        </member>
        <member name="F:Hl7.Fhir.Specification.FhirRelease.STU3">
            <summary>
            FHIR Release STU3 
            http://hl7.org/fhir/STU3
            </summary>
        </member>
        <member name="F:Hl7.Fhir.Specification.FhirRelease.R4">
            <summary>
            FHIR Release 4 
            http://hl7.org/fhir/R4
            </summary>
        </member>
        <member name="F:Hl7.Fhir.Specification.FhirRelease.R5">
            <summary>
            FHIR Release 5 
            </summary>
        </member>
        <member name="F:Hl7.Fhir.Specification.FhirRelease.R4B">
            <summary>
            FHIR Release 4B 
            </summary>
        </member>
        <member name="T:Hl7.Fhir.Utility.AnnotationList">
            <summary>
            This class implements the interfaces IAnnotatable and IAnnotated. It can be used by the classes that also implements these
            interfaces to have a common implementation. 
            This list is thread safe
            </summary>
        </member>
        <member name="M:Hl7.Fhir.Utility.AnnotationList.OfType(System.Type)">
            <summary>
            Returns all annotations of type <paramref name="type"/>
            </summary>
        </member>
        <member name="P:Hl7.Fhir.Utility.AnnotationList.IsEmpty">
            <summary>
            Gets a value that indicates whether there is an annotation present
            </summary>
        </member>
        <member name="M:Hl7.Fhir.Utility.AnnotationList.AddRange(Hl7.Fhir.Utility.AnnotationList)">
            <summary>
            Adds all the annotations from the <paramref name="source"/> to here. It will remove all existing annotations
            </summary>
            <param name="source"></param>
        </member>
        <member name="P:Hl7.Fhir.Utility.Cache`2.Settings">
            <summary>
            The settings for changing the behaviour of the case. Passed into the constructor and readonly here.
            </summary>
        </member>
        <member name="P:Hl7.Fhir.Utility.Cache`2.Retrieve">
            <summary>
            The function that will be called when a cache miss is detected. If null, cache misses result in 
            a returned value of null for the given key.
            </summary>
        </member>
        <member name="M:Hl7.Fhir.Utility.Cache`2.GetValue(`0)">
            <summary>
            Retrieves a value from the cahce by key. If missing, the retrieve function passed to the constructor will be called.
            </summary>
            <param name="key"></param>
            <returns>The requested value. If there is no retriever function set, this may be <c>null</c>.</returns>
        </member>
        <member name="M:Hl7.Fhir.Utility.Cache`2.GetValueOrAdd(`0,`1)">
            <summary>
            Retrieves a value from the cache by key. If missing, the passed <paramref name="value"/> is returned and added to the cache.
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="T:Hl7.Fhir.Utility.CodedException">
            <summary>
            This is a class of Exceptions that is raised by the SDK and is coded with a unique code
            to enable callers to identify this exception and react appropriately on the code.
            </summary>
            <remarks>Most modules of the SDK using this Exception will create specific subclasses
            for this subclass, providing a list of codes used by that module.</remarks>
        </member>
        <member name="P:Hl7.Fhir.Utility.CodedException.ErrorCode">
            <summary>
            The unique and permanent code for this error.
            </summary>
            <remarks>Developers can assume that these codes will not change in future versions.</remarks>
        </member>
        <member name="M:Hl7.Fhir.Utility.EnumerableExtensions.WithValues``1(System.Collections.Generic.IEnumerable{System.Nullable{``0}})">
            <summary>
            Transforms an <see cref="T:System.Collections.Generic.IEnumerable`1"/> with nullable contents <c>T?</c> into a (possibly smaller)
            enumerable of the non-nullable type <c>T</c>.
            </summary>
        </member>
        <member name="P:Hl7.Fhir.Utility.EnumLiteralAttribute.System">
            <summary>
            The system name-space of the code system that this literal value comes from 
            </summary>
        </member>
        <member name="T:Hl7.Fhir.Utility.EnumUtility">
            <summary>
            A set of utility methods to work with serialized enumeration values.
            </summary>
        </member>
        <member name="M:Hl7.Fhir.Utility.EnumUtility.GetLiteral(System.Enum)">
            <summary>
            Retrieves the literal value for the code represented by this enum value, or the member name itself if there
            is no literal value defined.
            </summary>
        </member>
        <member name="M:Hl7.Fhir.Utility.EnumUtility.GetSystem(System.Enum)">
            <summary>
            Retrieves the system canonical for the code represented by this enum value, or <c>null</c> if there is no system defined.
            </summary>
        </member>
        <member name="M:Hl7.Fhir.Utility.EnumUtility.GetDocumentation(System.Enum)">
            <summary>
            Retrieves the description for this enum value or the enumeration value itself if there is no description defined.
            </summary>
        </member>
        <member name="M:Hl7.Fhir.Utility.EnumUtility.ParseLiteral(System.String,System.Type,System.Boolean)">
            <summary>
            Finds an enumeration value from <paramref name="enumType"/> where the literal is the same as <paramref name="rawValue"/>.
            </summary>
        </member>
        <member name="M:Hl7.Fhir.Utility.EnumUtility.ParseLiteral``1(System.String,System.Boolean)">
            <summary>
            Finds an enumeration value from enum <typeparamref name="T"/> where the literal is the same as <paramref name="rawValue"/>.
            </summary>
        </member>
        <member name="M:Hl7.Fhir.Utility.EnumUtility.GetName(System.Type)">
            <summary>
            Gets the human readable name defined for the enumeration <paramref name="enumType"/>.
            </summary>
        </member>
        <member name="M:Hl7.Fhir.Utility.EnumUtility.GetName``1">
            <summary>
            Gets the human readable name defined for the enumeration <typeparamref name="T"/>.
            </summary>
        </member>
        <member name="M:Hl7.Fhir.Utility.ExceptionSourceExtensions.Catch(Hl7.Fhir.Utility.IExceptionSource,Hl7.Fhir.Utility.ExceptionNotificationHandler,System.Boolean)">
            <summary>
            Registers an <see cref="T:Hl7.Fhir.Utility.ExceptionNotificationHandler" /> with an <see cref="T:Hl7.Fhir.Utility.IExceptionSource"/>.
            </summary>
            <param name="source"></param>
            <param name="handler"></param>
            <param name="forward">If true, also forwards the error to the original handler (if any).</param>
            <returns>An object that, when disposed, unregisters the handler from the source.</returns>
            <remarks>
            <para>This function can be used directly inside a <c>using</c> block, to scope the interception
            of exceptions by the given handler to that block.</para>
            <para>The <paramref name="handler"/> replaces the handler already in place in the source (of any), but
            as soon as executing leaves the block, the handler is unregistered, and the original handler restored.</para>
            <para>If the source originally had a handler set, the <paramref name="forward"/> can be used to forward
            the exception to the original handler, after invoking the handler passed in with <paramref name="handler"/>.</para>
            </remarks>
            <example>
            <code>
            using(source.Catch((o,a) => lastError = a)) 
            {
                 var children = source.Children();
            }
            </code></example>
        </member>
        <member name="M:Hl7.Fhir.Utility.FhirReleaseParser.Parse(System.String)">
            <summary>
            Returns a FHIR version as an enum from a version number
            </summary>
            <param name="version">Fhir Release version number</param>
            <returns>Official FHIR Release</returns>
        </member>
        <member name="M:Hl7.Fhir.Utility.FhirReleaseParser.TryParse(System.String,System.Nullable{Hl7.Fhir.Specification.FhirRelease}@)">
            <summary>
            Converts a version number into a specific official FHIR Release
            </summary>
            <param name="version">Fhir Release version number</param>
            <param name="release">Official FHIR Release</param>
            <returns>true if the conversion succeeded; false otherwise.</returns>
        </member>
        <member name="M:Hl7.Fhir.Utility.FhirReleaseParser.FhirVersionFromRelease(Hl7.Fhir.Specification.FhirRelease)">
            <summary>
            Returns the version number of the latest official FHIR releases
            </summary>
            <param name="fhirRelease">Official FHIR release</param>
            <returns>Latest version number</returns>
        </member>
        <member name="M:Hl7.Fhir.Utility.FhirReleaseParser.FhirReleaseFromMimeVersion(System.String)">
            <summary>
            Returns the official FHIR version based on the value of a MIME-Type parameter 'fhirversion'
            </summary>
            <param name="fhirMimeVersion">'fhirversion' MIME-Type parameter</param>
            <returns>Official FHIR Release</returns>
        </member>
        <member name="M:Hl7.Fhir.Utility.FhirReleaseParser.TryGetFhirReleaseFromMimeVersion(System.String,System.Nullable{Hl7.Fhir.Specification.FhirRelease}@)">
            <summary>
            Gets the official FHIR version based on the value of a MIME-Type parameter 'fhirversion'
            </summary>
            <param name="fhirMimeVersion">'fhirversion' MIME-Type parameter</param>
            <param name="release">Official FHIR Release</param>
            <returns>true if the conversion succeeded; false otherwise.</returns>
        </member>
        <member name="M:Hl7.Fhir.Utility.FhirReleaseParser.MimeVersionFromFhirRelease(Hl7.Fhir.Specification.FhirRelease)">
            <summary>
            Returns the value of the 'fhirversion' MIME-type parameter corresponding to a specific FHIR Version
            </summary>
            <param name="fhirRelease">Official FHIR release</param>
            <returns>Corresponding 'fhirversion' MIME-Type value, see http://hl7.org/fhir/http.html#version-parameter
            for more information.</returns>
        </member>
        <member name="M:Hl7.Fhir.Utility.FhirReleaseParser.FhirReleaseFromCorePackageName(System.String)">
            <summary>
            Returns the corresponding FHIR release version of the specific FHIR Core package from HL7
            </summary>
            <param name="packageName">FHIR Core package name</param>
            <returns>Official FHIR Release</returns>
        </member>
        <member name="M:Hl7.Fhir.Utility.FhirReleaseParser.TryGetFhirReleaseFromCorePackageName(System.String,System.Nullable{Hl7.Fhir.Specification.FhirRelease}@)">
            <summary>
            Gets the corresponding FHIR release version of the specific FHIR Core package from HL7
            </summary>
            <param name="packageName">FHIR Core package name</param>
            <param name="release">Official FHIR Release</param>
            <returns>true if the conversion succeeded; false otherwise</returns>
        </member>
        <member name="M:Hl7.Fhir.Utility.FhirReleaseParser.CorePackageNameFromFhirRelease(Hl7.Fhir.Specification.FhirRelease)">
            <summary>
            Returns the corresponding FHIR core package of the specific FHIR Release version
            </summary>
            <param name="fhirRelease">FHIR Release version</param>
            <returns>FHIR Core package name</returns>
        </member>
        <member name="M:Hl7.Fhir.Utility.IntExtensions.Digits(System.Int32)">
            <summary>
            The number of digits in a non-negative number. Returns 1 for all
            negative numbers. That is ok because we are using it to calculate
            string length for a <see cref="T:System.Text.StringBuilder"/> for numbers that
            aren't supposed to be negative, but when they are it is just a little
            slower.
            </summary>
            <remarks>
            This approach is based on https://stackoverflow.com/a/51099524/268898
            where the poster offers performance benchmarks showing this is the
            fastest way to get a number of digits.
            </remarks>
        </member>
        <member name="T:Hl7.Fhir.Utility.IPositionInfo">
            <summary>
            Represents an object that can provide line/position information within data being processed.
            </summary>
        </member>
        <member name="P:Hl7.Fhir.Utility.IPositionInfo.LineNumber">
            <summary>
            The line number within the data, starting with 1 for the first line.
            </summary>
        </member>
        <member name="P:Hl7.Fhir.Utility.IPositionInfo.LinePosition">
            <summary>
            The position within the line, starting with 1 for the first column.
            </summary>
        </member>
        <member name="T:Hl7.Fhir.Utility.PositionInfo">
            <summary>
            A class representing line/position information within data being processed.
            </summary>
        </member>
        <member name="P:Hl7.Fhir.Utility.PositionInfo.LineNumber">
            <inheritdoc />
        </member>
        <member name="P:Hl7.Fhir.Utility.PositionInfo.LinePosition">
            <inheritdoc />
        </member>
        <member name="T:Hl7.Fhir.Utility.Error">
            <summary>
            Utility class for creating and unwrapping <see cref="T:System.Exception"/> instances.
            </summary>
        </member>
        <member name="M:Hl7.Fhir.Utility.Error.Argument(System.String)">
            <summary>
            Creates an <see cref="T:System.ArgumentException"/> with the provided properties.
            </summary>
        </member>
        <member name="M:Hl7.Fhir.Utility.Error.Argument(System.String,System.String)">
            <summary>
            Creates an <see cref="T:System.ArgumentException"/> with the provided properties.
            </summary>
        </member>
        <member name="M:Hl7.Fhir.Utility.Error.ArgumentNull(System.String)">
            <summary>
            Creates an <see cref="T:System.ArgumentNullException"/> with the provided properties.
            </summary>
        </member>
        <member name="M:Hl7.Fhir.Utility.Error.ArgumentNull(System.String,System.String)">
            <summary>
            Creates an <see cref="T:System.ArgumentNullException"/> with the provided properties.
            </summary>
        </member>
        <member name="M:Hl7.Fhir.Utility.Error.ArgumentNullOrEmpty(System.String)">
            <summary>
            Creates an <see cref="T:System.ArgumentException"/> with a default message.
            </summary>
            <param name="parameterName">The name of the parameter that caused the current exception.</param>
            <returns>The logged <see cref="T:System.Exception"/>.</returns>
        </member>
        <member name="M:Hl7.Fhir.Utility.Error.InvalidOperation(System.String)">
            <summary>
            Creates an <see cref="T:System.InvalidOperationException"/>.
            </summary>
        </member>
        <member name="M:Hl7.Fhir.Utility.Error.InvalidOperation(System.Exception,System.String)">
            <summary>
            Creates an <see cref="T:System.InvalidOperationException"/>.
            </summary>
        </member>
        <member name="M:Hl7.Fhir.Utility.Error.NotSupported(System.String)">
            <summary>
            Creates an <see cref="T:System.NotSupportedException"/>.
            </summary>
        </member>
        <member name="M:Hl7.Fhir.Utility.Error.NotImplemented(System.String)">
            <summary>
            Creates an <see cref="T:System.NotImplementedException"/>.
            </summary>
        </member>
        <member name="M:Hl7.Fhir.Utility.Error.NotImplemented">
            <summary>
            Creates an <see cref="T:System.NotImplementedException"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Hl7.Fhir.Utility.Error.Format(System.String,System.String)">
            <summary> 
            Creates an <see cref="T:System.FormatException"/> with the provided properties. 
            </summary> 
        </member>
        <member name="M:Hl7.Fhir.Utility.Error.Format(System.String,Hl7.Fhir.Utility.IPositionInfo)">
            <summary> 
            Creates an <see cref="T:System.FormatException"/> with the provided properties. 
            </summary> 
        </member>
        <member name="M:Hl7.Fhir.Utility.Error.Format(System.String,System.Int32,System.Int32)">
            <summary> 
            Creates an <see cref="T:System.FormatException"/> with the provided properties. 
            </summary> 
        </member>
        <member name="T:Hl7.Fhir.Utility.PropertyInfoExtensions">
            <summary>
            Utility methods for generating delegates to support the deserializer.
            </summary>
        </member>
        <member name="M:Hl7.Fhir.Utility.PropertyInfoExtensions.BuildFactoryMethod(System.Type)">
            <summary>
            Generates a function that creates an instance of the given type.
            </summary>
        </member>
        <member name="M:Hl7.Fhir.Utility.PropertyInfoExtensions.BuildListFactoryMethod(System.Type)">
            <summary>
            Generates a function that creates an instance of a list of the given type.
            </summary>
            <remarks>The returned instance will actually be of type <see cref="T:System.Collections.Generic.List`1"/> where T is the given type.</remarks>
        </member>
        <member name="M:Hl7.Fhir.Utility.PropertyInfoExtensions.GetValueGetter``1(System.Reflection.PropertyInfo)">
            <summary>
            Generates a function that, when passed an instance, gets the value of the given property.
            </summary>
        </member>
        <member name="M:Hl7.Fhir.Utility.PropertyInfoExtensions.GetValueGetter(System.Reflection.PropertyInfo)">
            <summary>
            Generates a function that, when passed an object instance, gets the value of the given property.
            </summary>   
        </member>
        <member name="M:Hl7.Fhir.Utility.PropertyInfoExtensions.GetValueSetter``1(System.Reflection.PropertyInfo)">
            <summary>
            Generates a function that, when passed an instance and a value, sets the value of the given property.
            </summary>
        </member>
        <member name="M:Hl7.Fhir.Utility.PropertyInfoExtensions.GetValueSetter(System.Reflection.PropertyInfo)">
            <summary>
            Generates a function that, when passed an object instance and a value, sets the value of the given property.
            </summary>
        </member>
        <member name="M:Hl7.Fhir.Utility.ReflectionHelper.GetAttributeOnEnum``1(System.Enum)">
            <summary>
            Gets an attribute on an enum field value
            </summary>
            <typeparam name="T">The type of the attribute you want to retrieve</typeparam>
            <param name="enumVal">The enum value</param>
            <returns>The attribute of type T that exists on the enum value</returns>
        </member>
        <member name="M:Hl7.Fhir.Utility.ReflectionHelper.FindPublicProperties(System.Type)">
            <summary>
            Returns all public, non-static properties for the given type.
            </summary>
            <param name="t"></param>
            <returns></returns>
        </member>
        <member name="M:Hl7.Fhir.Utility.ReflectionHelper.HasDefaultPublicConstructor(System.Type)">
            <summary>
            Returns true if the type is a primitive value type that has a parameterless public constructor.
            </summary>
        </member>
        <member name="M:Hl7.Fhir.Utility.ReflectionHelper.IsNullableType(System.Type)">
            <summary>
            Returns true if the type is a <see cref="T:System.Nullable`1"/>.
            </summary>
        </member>
        <member name="M:Hl7.Fhir.Utility.ReflectionHelper.GetNullableArgument(System.Type)">
            <summary>
            If the given type is a <see cref="T:System.Nullable`1"/>, this function will return T.
            </summary>
        </member>
        <member name="M:Hl7.Fhir.Utility.ReflectionHelper.IsTypedCollection(System.Type)">
            <summary>
            Returns true if the given type is a .NET2.0+ typed collection.
            </summary>
        </member>
        <member name="M:Hl7.Fhir.Utility.ReflectionHelper.GetCollectionItemType(System.Type)">
            <summary>
            Gets the type of the typed collection's items.
            </summary>
            <param name="type">The type.</param>
            <returns>The type of the typed collection's items.</returns>
        </member>
        <member name="T:Hl7.Fhir.Utility.SemVersion">
            <summary>
            A semantic version implementation.
            Conforms with v2.0.0 of http://semver.org
            </summary>
        </member>
        <member name="M:Hl7.Fhir.Utility.SemVersion.#ctor(System.Int32,System.Int32,System.Int32,System.String,System.String)">
            <summary>
            Constructs a new instance of the <see cref="T:Hl7.Fhir.Utility.SemVersion" /> class.
            </summary>
            <param name="major">The major version.</param>
            <param name="minor">The minor version.</param>
            <param name="patch">The patch version.</param>
            <param name="prerelease">The prerelease version (e.g. "alpha").</param>
            <param name="build">The build metadata (e.g. "nightly.232").</param>
        </member>
        <member name="M:Hl7.Fhir.Utility.SemVersion.#ctor(System.Version)">
            <summary>
            Constructs a new instance of the <see cref="T:Hl7.Fhir.Utility.SemVersion"/> class from
            a <see cref="T:System.Version"/>.
            </summary>
            <param name="version">The <see cref="T:System.Version"/> that is used to initialize
            the Major, Minor, Patch and Build.</param>
            <returns>A <see cref="T:Hl7.Fhir.Utility.SemVersion"/> with the same Major and Minor version.
            The Patch version will be the fourth part of the version number. The
            build meta data will contain the third part of the version number if
            it is greater than zero.</returns>
        </member>
        <member name="M:Hl7.Fhir.Utility.SemVersion.Parse(System.String,System.Boolean)">
            <summary>
            Converts the string representation of a semantic version to its <see cref="T:Hl7.Fhir.Utility.SemVersion"/> equivalent.
            </summary>
            <param name="version">The version string.</param>
            <param name="strict">If set to <see langword="true"/> minor and patch version are required,
            otherwise they are optional.</param>
            <returns>The <see cref="T:Hl7.Fhir.Utility.SemVersion"/> object.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="version"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException">The <paramref name="version"/> has an invalid format.</exception>
            <exception cref="T:System.InvalidOperationException">The <paramref name="version"/> is missing Minor or Patch versions and <paramref name="strict"/> is <see langword="true"/>.</exception>
            <exception cref="T:System.OverflowException">The Major, Minor, or Patch versions are larger than <code>int.MaxValue</code>.</exception>
        </member>
        <member name="M:Hl7.Fhir.Utility.SemVersion.TryParse(System.String,Hl7.Fhir.Utility.SemVersion@,System.Boolean)">
            <summary>
            Converts the string representation of a semantic version to its <see cref="T:Hl7.Fhir.Utility.SemVersion"/>
            equivalent and returns a value that indicates whether the conversion succeeded.
            </summary>
            <param name="version">The version string.</param>
            <param name="semver">When the method returns, contains a <see cref="T:Hl7.Fhir.Utility.SemVersion"/> instance equivalent
            to the version string passed in, if the version string was valid, or <see langword="null"/> if the
            version string was not valid.</param>
            <param name="strict">If set to <see langword="true"/> minor and patch version are required,
            otherwise they are optional.</param>
            <returns><see langword="false"/> when a invalid version string is passed, otherwise <see langword="true"/>.</returns>
        </member>
        <member name="M:Hl7.Fhir.Utility.SemVersion.Equals(Hl7.Fhir.Utility.SemVersion,Hl7.Fhir.Utility.SemVersion)">
            <summary>
            Checks whether two semantic versions are equal.
            </summary>
            <param name="versionA">The first version to compare.</param>
            <param name="versionB">The second version to compare.</param>
            <returns><see langword="true"/> if the two values are equal, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:Hl7.Fhir.Utility.SemVersion.Compare(Hl7.Fhir.Utility.SemVersion,Hl7.Fhir.Utility.SemVersion)">
            <summary>
            Compares the specified versions.
            </summary>
            <param name="versionA">The first version to compare.</param>
            <param name="versionB">The second version to compare.</param>
            <returns>A signed number indicating the relative values of <paramref name="versionA"/> and <paramref name="versionB"/>.</returns>
        </member>
        <member name="M:Hl7.Fhir.Utility.SemVersion.Change(System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.String,System.String)">
            <summary>
            Make a copy of the current instance with changed properties.
            </summary>
            <param name="major">The value to replace the major version or <see langword="null"/> to leave it unchanged.</param>
            <param name="minor">The value to replace the minor version or <see langword="null"/> to leave it unchanged.</param>
            <param name="patch">The value to replace the patch version or <see langword="null"/> to leave it unchanged.</param>
            <param name="prerelease">The value to replace the prerelease version or <see langword="null"/> to leave it unchanged.</param>
            <param name="build">The value to replace the build metadata or <see langword="null"/> to leave it unchanged.</param>
            <returns>The new version object.</returns>
            <remarks>
            The change method is intended to be called using named argument syntax, passing only
            those fields to be changed.
            </remarks>
            <example>
            To change only the patch version:
            <code>version.Change(patch: 4)</code>
            </example>
        </member>
        <member name="P:Hl7.Fhir.Utility.SemVersion.Major">
            <summary>
            Gets the major version.
            </summary>
            <value>
            The major version.
            </value>
        </member>
        <member name="P:Hl7.Fhir.Utility.SemVersion.Minor">
            <summary>
            Gets the minor version.
            </summary>
            <value>
            The minor version.
            </value>
        </member>
        <member name="P:Hl7.Fhir.Utility.SemVersion.Patch">
            <summary>
            Gets the patch version.
            </summary>
            <value>
            The patch version.
            </value>
        </member>
        <member name="P:Hl7.Fhir.Utility.SemVersion.Prerelease">
            <summary>
            Gets the prerelease version.
            </summary>
            <value>
            The prerelease version. Empty string if this is a release version.
            </value>
        </member>
        <member name="P:Hl7.Fhir.Utility.SemVersion.Build">
            <summary>
            Gets the build metadata.
            </summary>
            <value>
            The build metadata. Empty string if there is no build metadata.
            </value>
        </member>
        <member name="M:Hl7.Fhir.Utility.SemVersion.ToString">
            <summary>
            Returns the <see cref="T:System.String" /> equivalent of this version.
            </summary>
            <returns>
            The <see cref="T:System.String" /> equivalent of this version.
            </returns>
        </member>
        <member name="M:Hl7.Fhir.Utility.SemVersion.CompareTo(System.Object)">
            <summary>
            Compares the current instance with another object of the same type and returns an integer that indicates
            whether the current instance precedes, follows, or occurs in the same position in the sort order as the
            other object.
            </summary>
            <param name="obj">An object to compare with this instance.</param>
            <returns>
            A value that indicates the relative order of the objects being compared.
            The return value has these meanings:
             Less than zero: This instance precedes <paramref name="obj" /> in the sort order.
             Zero: This instance occurs in the same position in the sort order as <paramref name="obj" />.
             Greater than zero: This instance follows <paramref name="obj" /> in the sort order.
            </returns>
            <exception cref="T:System.InvalidCastException">The <paramref name="obj"/> is not a <see cref="T:Hl7.Fhir.Utility.SemVersion"/>.</exception>
        </member>
        <member name="M:Hl7.Fhir.Utility.SemVersion.CompareTo(Hl7.Fhir.Utility.SemVersion)">
            <summary>
            Compares the current instance with another object of the same type and returns an integer that indicates
            whether the current instance precedes, follows, or occurs in the same position in the sort order as the
            other object.
            </summary>
            <param name="other">An object to compare with this instance.</param>
            <returns>
            A value that indicates the relative order of the objects being compared.
            The return value has these meanings:
             Less than zero: This instance precedes <paramref name="other" /> in the sort order.
             Zero: This instance occurs in the same position in the sort order as <paramref name="other" />.
             Greater than zero: This instance follows <paramref name="other" /> in the sort order.
            </returns>
        </member>
        <member name="M:Hl7.Fhir.Utility.SemVersion.PrecedenceMatches(Hl7.Fhir.Utility.SemVersion)">
            <summary>
            Returns whether two semantic versions have the same precedence. Versions
            that differ only by build metadata have the same precedence.
            </summary>
            <param name="other">The semantic version to compare to.</param>
            <returns><see langword="true"/> if the version precedences are equal.</returns>
        </member>
        <member name="M:Hl7.Fhir.Utility.SemVersion.CompareByPrecedence(Hl7.Fhir.Utility.SemVersion)">
            <summary>
            Compares two semantic versions by precedence as defined in the SemVer spec. Versions
            that differ only by build metadata have the same precedence.
            </summary>
            <param name="other">The semantic version.</param>
            <returns>
            A value that indicates the relative order of the objects being compared.
            The return value has these meanings:
             Less than zero: This instance precedes <paramref name="other" /> in the sort order.
             Zero: This instance occurs in the same position in the sort order as <paramref name="other" />.
             Greater than zero: This instance follows <paramref name="other" /> in the sort order.
            </returns>
        </member>
        <member name="M:Hl7.Fhir.Utility.SemVersion.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object" /> is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object" /> to compare with this instance.</param>
            <returns>
              <see langword="true"/> if the specified <see cref="T:System.Object" /> is equal to this instance, otherwise <see langword="false"/>.
            </returns>
            <exception cref="T:System.InvalidCastException">The <paramref name="obj"/> is not a <see cref="T:Hl7.Fhir.Utility.SemVersion"/>.</exception>
        </member>
        <member name="M:Hl7.Fhir.Utility.SemVersion.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.
            </returns>
        </member>
        <member name="M:Hl7.Fhir.Utility.SemVersion.op_Implicit(System.String)~Hl7.Fhir.Utility.SemVersion">
            <summary>
            Implicit conversion from <see cref="T:System.String"/> to <see cref="T:Hl7.Fhir.Utility.SemVersion"/>.
            </summary>
            <param name="version">The semantic version.</param>
            <returns>The <see cref="T:Hl7.Fhir.Utility.SemVersion"/> object.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="version"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException">The version number has an invalid format.</exception>
            <exception cref="T:System.OverflowException">The Major, Minor, or Patch versions are larger than <code>int.MaxValue</code>.</exception>
        </member>
        <member name="M:Hl7.Fhir.Utility.SemVersion.op_Equality(Hl7.Fhir.Utility.SemVersion,Hl7.Fhir.Utility.SemVersion)">
            <summary>
            Compares two semantic versions for equality.
            </summary>
            <param name="left">The left value.</param>
            <param name="right">The right value.</param>
            <returns>If left is equal to right <see langword="true"/>, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:Hl7.Fhir.Utility.SemVersion.op_Inequality(Hl7.Fhir.Utility.SemVersion,Hl7.Fhir.Utility.SemVersion)">
            <summary>
            Compares two semantic versions for inequality.
            </summary>
            <param name="left">The left value.</param>
            <param name="right">The right value.</param>
            <returns>If left is not equal to right <see langword="true"/>, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:Hl7.Fhir.Utility.SemVersion.op_GreaterThan(Hl7.Fhir.Utility.SemVersion,Hl7.Fhir.Utility.SemVersion)">
            <summary>
            Compares two semantic versions.
            </summary>
            <param name="left">The left value.</param>
            <param name="right">The right value.</param>
            <returns>If left is greater than right <see langword="true"/>, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:Hl7.Fhir.Utility.SemVersion.op_GreaterThanOrEqual(Hl7.Fhir.Utility.SemVersion,Hl7.Fhir.Utility.SemVersion)">
            <summary>
            Compares two semantic versions.
            </summary>
            <param name="left">The left value.</param>
            <param name="right">The right value.</param>
            <returns>If left is greater than or equal to right <see langword="true"/>, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:Hl7.Fhir.Utility.SemVersion.op_LessThan(Hl7.Fhir.Utility.SemVersion,Hl7.Fhir.Utility.SemVersion)">
            <summary>
            Compares two semantic versions.
            </summary>
            <param name="left">The left value.</param>
            <param name="right">The right value.</param>
            <returns>If left is less than right <see langword="true"/>, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:Hl7.Fhir.Utility.SemVersion.op_LessThanOrEqual(Hl7.Fhir.Utility.SemVersion,Hl7.Fhir.Utility.SemVersion)">
            <summary>
            Compares two semantic versions.
            </summary>
            <param name="left">The left value.</param>
            <param name="right">The right value.</param>
            <returns>If left is less than or equal to right <see langword="true"/>, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:Hl7.Fhir.Utility.StringExtensions.MatchesPrefix(System.String,System.String)">
            <summary>
            See if text matches prefix, where the prefix can be either a
            string, or string ending in '*'. In the latter case a prefix match
            is done, otherwise the full strings are compared.
            </summary>
            <param name="text"></param>
            <param name="prefix"></param>
            <returns></returns>
        </member>
        <member name="T:Hl7.Fhir.Utility.Unit">
            <summary>
            Units is the formal type with one element and has no representation in .NET.
            It is used to provide a type where none is wanted or expected, e.g. to supply
            a mandatory generic type argument to a monad when no real value needs to be
            represented in the monad.
            </summary>
            <remarks>It's unfortunate that Microsoft does not allow us to use the already
            existing System.Void type for this - which is defined more or less equivalently.
            </remarks>
        </member>
    </members>
</doc>
